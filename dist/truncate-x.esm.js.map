{"version":3,"sources":["../src/truncate-x.js"],"names":[],"mappings":"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","file":"truncate-x.esm.js","sourcesContent":["import toLength from 'to-length-x';\nimport isRegExp from 'is-regexp-x';\nimport safeToString from 'to-string-symbols-supported-x';\nimport isObjectLike from 'is-object-like-x';\nimport hasOwn from 'has-own-property-x';\nimport arraySlice from 'array-slice-x';\nimport toBoolean from 'to-boolean-x';\nimport isNil from 'is-nil-x';\n\nconst EMPTY_STRING = '';\nconst {match, slice, search, indexOf, lastIndexOf} = EMPTY_STRING;\nconst aJoin = [].join;\nconst RegExpCtr = /none/.constructor;\n\n/* Used to match `RegExp` flags from their coerced string values. */\nconst reFlags = /\\w*$/;\nconst rxTest = reFlags.test;\nconst rxExec = reFlags.exec;\n\n/* Used to compose unicode character classes. */\nconst rsAstralRange = '\\\\ud800-\\\\udfff';\nconst rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nconst rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\nconst rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/* Used to compose unicode capture groups. */\nconst rsAstral = `[${rsAstralRange}]`;\nconst rsCombo = `[${rsComboMarksRange}${rsComboSymbolsRange}]`;\nconst rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nconst rsModifier = `(?:${rsCombo}|${rsFitz})`;\nconst rsNonAstral = `[^${rsAstralRange}]`;\nconst rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nconst rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nconst rsZWJ = '\\\\u200d';\n\n/* Used to compose unicode regexes. */\nconst reOptMod = `${rsModifier}?`;\nconst rsOptVar = `[${rsVarRange}]?`;\nconst rsOptJoin = `(?:${rsZWJ}(?:${aJoin.call([rsNonAstral, rsRegional, rsSurrPair], '|')})${rsOptVar}${reOptMod})*`;\nconst rsSeq = rsOptVar + reOptMod + rsOptJoin;\nconst rsSymbol = `(?:${aJoin.call([`${rsNonAstral + rsCombo}?`, rsCombo, rsRegional, rsSurrPair, rsAstral], '|')})`;\n\n/*\n * Used to match string symbols\n * @see https://mathiasbynens.be/notes/javascript-unicode\n */\nconst reComplexSymbol = new RegExpCtr(`${rsFitz}(?=${rsFitz})|${rsSymbol}${rsSeq}`, 'g');\n\n/*\n * Used to detect strings with [zero-width joiners or code points from\n * the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/).\n */\nconst reHasComplexSymbol = new RegExpCtr(`[${rsZWJ}${rsAstralRange}${rsComboMarksRange}${rsComboSymbolsRange}${rsVarRange}]`);\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string - The string to inspect.\n * @returns {number} Returns the string size.\n */\nconst stringSize = function _stringSize(string) {\n  if (toBoolean(string) === false || rxTest.call(reHasComplexSymbol, string) === false) {\n    return string.length;\n  }\n\n  reComplexSymbol.lastIndex = 0;\n  let result = 0;\n  while (rxTest.call(reComplexSymbol, string)) {\n    result += 1;\n  }\n\n  return result;\n};\n\nconst getOptions = function getOptions(options) {\n  const opts = {length: 30, omission: '...', separator: null};\n\n  if (isObjectLike(options)) {\n    if (hasOwn(options, 'length')) {\n      opts.length = toLength(options.length);\n    }\n\n    if (hasOwn(options, 'omission')) {\n      opts.omission = options.omission;\n    }\n\n    if (hasOwn(options, 'separator')) {\n      opts.separator = options.separator;\n    }\n  }\n\n  return opts;\n};\n\nconst getConsts = function getConsts(str) {\n  if (rxTest.call(reHasComplexSymbol, str)) {\n    const matchSymbols = match.call(str, reComplexSymbol);\n\n    return {\n      matchSymbols: match.call(str, reComplexSymbol),\n      strLength: matchSymbols.length,\n    };\n  }\n\n  return {\n    matchSymbols: null,\n    strLength: str.length,\n  };\n};\n\nconst getNewEnd = function getNewEnd(rxSeperator, result) {\n  let newEnd;\n  let rxMatch = rxExec.call(rxSeperator, result);\n  while (rxMatch) {\n    newEnd = rxMatch.index;\n    rxMatch = rxExec.call(rxSeperator, result);\n  }\n\n  return newEnd;\n};\n\nconst getRxResult = function getRxResult(obj) {\n  const {str, separator, end, result} = obj;\n\n  if (search.call(slice.call(str, end), separator)) {\n    const rxSeperator = toBoolean(separator.global)\n      ? separator\n      : new RegExpCtr(separator.source, `${safeToString(rxExec.call(reFlags, separator))}g`);\n\n    rxSeperator.lastIndex = 0;\n    const newEnd = getNewEnd(rxSeperator, result);\n\n    return slice.call(result, 0, typeof newEnd === 'undefined' ? end : newEnd);\n  }\n\n  return result;\n};\n\nconst getResult = function getResult(obj) {\n  const {str, separator, end, result} = obj;\n\n  if (isRegExp(separator)) {\n    return getRxResult({str, separator, end, result});\n  }\n\n  if (indexOf.call(str, separator, end) !== end) {\n    const index = lastIndexOf.call(result, separator);\n\n    if (index > -1) {\n      return slice.call(result, 0, index);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @param {string} string - The string to truncate.\n * @param {object} [options] - The options object.\n * @param {number} [options.length=30] - The maximum string length.\n * @param {string} [options.omission='...'] - The string to indicate text\n * is omitted.\n * @param {RegExp|string} [options.separator] - The separator pattern to\n * truncate to.\n * @returns {string} Returns the truncated string.\n */\nconst truncate = function truncate(string, options) {\n  const str = safeToString(string);\n  const {length, omission, separator} = getOptions(options);\n  const {strLength, matchSymbols} = getConsts(str);\n\n  if (length >= strLength) {\n    return str;\n  }\n\n  const end = length - stringSize(omission);\n\n  if (end < 1) {\n    return omission;\n  }\n\n  const result = matchSymbols ? aJoin.call(arraySlice(matchSymbols, 0, end), EMPTY_STRING) : slice.call(str, 0, end);\n\n  if (isNil(separator)) {\n    return result + omission;\n  }\n\n  const secondEnd = matchSymbols ? result.length : end;\n  const secondResult = getResult({str, separator, end: secondEnd, result});\n\n  return secondResult + omission;\n};\n\nexport default truncate;\n"]}